"H+[side 1]",
"H+[side 2]",
"Na+[side 1]",
"Na+[side 2]",
"Sodium cation",
"HCO3-"
],
"all_subunits": true
}'
networks_result <- post_json("http://127.0.0.1:8000/compute/networks", networks_payload)
print(dplyr::bind_rows(networks_result$fluxes))
fp <- "G:\\My Drive\\FermentationExplorer\\dev\\test\\e_coli_networks.json"
networks_payload <- readLines(fp)
cat("\n==== /compute/networks ====\n")
networks_payload <- '{
"selected_organisms": ["Escherichia coli"],
"reference_reactions": "Fermentation (glucose)",
"substrates": ["D-Glucose"],
"products": [
"Acetate", "(S)-Lactate", "(R)-Lactate", "Ethanol", "Succinate",
"Propanoate", "Butanoic acid", "Formate", "Hydrogen", "CO2"
],
"unbalanced_intermediates": [
"NAD+", "NADH", "NADP+", "NADPH",
"FAD", "FADH2",
"Reduced ferredoxin", "Oxidized ferredoxin",
"Ubiquinone", "Ubiquinol",
"Quinone", "Hydroquinone",
"Menaquinone", "Menaquinol",
"Oxidized hydrogenase", "Reduced hydrogenase",
"ATP", "ADP", "AMP",
"GTP", "GDP",
"Orthophosphate", "Diphosphate", "Polyphosphate",
"H2O", "H+",
"H+[side 1]", "H+[side 2]",
"Na+[side 1]", "Na+[side 2]",
"Sodium cation", "HCO3-"
],
"all_subunits": true
}'
cat("\n==== /compute/networks ====\n")
networks_payload <- '{
"selected_organisms": ["Escherichia coli"],
"reference_reactions": "Fermentation (glucose)",
"substrates": ["D-Glucose"],
"products": [
"Acetate", "(S)-Lactate", "(R)-Lactate", "Ethanol", "Succinate",
"Propanoate", "Butanoic acid", "Formate", "Hydrogen", "CO2"
],
"unbalanced_intermediates": [
"NAD+", "NADH", "NADP+", "NADPH",
"FAD", "FADH2",
"Reduced ferredoxin", "Oxidized ferredoxin",
"Ubiquinone", "Ubiquinol",
"Quinone", "Hydroquinone",
"Menaquinone", "Menaquinol",
"Oxidized hydrogenase", "Reduced hydrogenase",
"ATP", "ADP", "AMP",
"GTP", "GDP",
"Orthophosphate", "Diphosphate", "Polyphosphate",
"H2O", "H+",
"H+[side 1]", "H+[side 2]",
"Na+[side 1]", "Na+[side 2]",
"Sodium cation", "HCO3-"
],
"all_subunits": true
}'
networks_result <- post_json("http://127.0.0.1:8000/compute/networks", networks_payload)
print(dplyr::bind_rows(networks_result$fluxes))
fp <- "G:\\My Drive\\FermentationExplorer\\dev\\test\\e_coli_networks.json"
networks_payload <- readLines(fp)
networks_result <- post_json("http://127.0.0.1:8000/compute/networks", networks_payload)
print(dplyr::bind_rows(networks_result$fluxes))
# Variable:  selected_organisms
cat("\n==== /compute/ml ====\n")
ml_payload <- '{
"selected_organisms": ["Escherichia coli", "Fibrobacter succinogenes succinogenes", "Clostridium lundense"],
"model_names": [
"Fermentation (type of metabolism)",
"Methanogenesis (type of metabolism)",
"Gram positive (gram stain)",
"Motility positive (motility)",
"Anaerobe (oxygen tolerance)"
]
}'
ml_result <- post_json("http://127.0.0.1:8000/compute/ml", ml_payload)
print(dplyr::bind_rows(ml_result$probabilities))
# Variable:  gene_functions
fp <- "G:\\My Drive\\FermentationExplorer\\dev\\test\\e_coli_ml.json"
ml_payload <- readLines(fp)
ml_result <- post_json("http://127.0.0.1:8000/compute/ml", ml_payload)
print(dplyr::bind_rows(ml_result$probabilities))
# Variable:  selected_organisms
cat("\n==== /compute/ml ====\n")
ml_payload <- '{
"selected_organisms": ["Escherichia coli"],
"model_names": [
"Fermentation (type of metabolism)",
"Methanogenesis (type of metabolism)",
"Gram positive (gram stain)",
"Motility positive (motility)",
"Anaerobe (oxygen tolerance)"
]
}'
ml_result <- post_json("http://127.0.0.1:8000/compute/ml", ml_payload)
print(dplyr::bind_rows(ml_result$probabilities))
read.csv("G:\\My Drive\\FermentationExplorer\\dev\test\\e_coli.txt")
read.csv("G:\\My Drive\\FermentationExplorer\\dev\\test\\e_coli.txt")
df <- read.csv("G:\\My Drive\\FermentationExplorer\\dev\\test\\e_coli.txt")
df
head(df)
df <- readr::read_delim("G:\\My Drive\\FermentationExplorer\\dev\\test\\e_coli.txt")
df
# Convert NA to NULL and create compact list format
compact_list <- lapply(df, function(col) {
ifelse(is.na(col), NA, col)
})
# Convert to JSON with pretty formatting and nulls
json_text <- jsonlite::toJSON(
list(gene_functions = compact_list),
pretty = TRUE,
auto_unbox = TRUE,
na = "null"
)
json_text
# Print or write to file
cat(json_text)
df <- readr::read_delim("G:\\My Drive\\FermentationExplorer\\dev\\test\\e_coli.txt")
# Create the compact JSON text
compact_list <- lapply(df, function(col) {
ifelse(is.na(col), NA, col)
})
json_text <- jsonlite::toJSON(
list(df = compact_list),
pretty = TRUE,
auto_unbox = TRUE,
na = "null"
)
getwd()
# Write to file
writeLines(json_text, "gene_functions.json")
# Variable:  gene_functions
fp <- "G:\\My Drive\\FermentationExplorer\\dev\\test\\e_coli_networks.json"
networks_payload <- readLines(fp)
networks_result <- post_json("http://127.0.0.1:8000/compute/networks", networks_payload)
print(dplyr::bind_rows(networks_result$fluxes))
networks_payload
# Variable:  gene_functions
fp <- "G:\\My Drive\\FermentationExplorer\\dev\\test\\e_coli_ml.json"
ml_payload <- readLines(fp)
ml_result <- post_json("http://127.0.0.1:8000/compute/ml", ml_payload)
print(dplyr::bind_rows(ml_result$probabilities))
# === Compute: /compute/ml ===
# Variable:  selected_organisms
cat("\n==== /compute/ml ====\n")
ml_payload <- '{
"selected_organisms": ["Escherichia coli", "Fibrobacter succinogenes succinogenes", "Clostridium lundense"],
"model_names": [
"Fermentation (type of metabolism)",
"Methanogenesis (type of metabolism)",
"Gram positive (gram stain)",
"Motility positive (motility)",
"Anaerobe (oxygen tolerance)"
]
}'
ml_result <- post_json("http://127.0.0.1:8000/compute/ml", ml_payload)
print(dplyr::bind_rows(ml_result$probabilities))
# Variable:  gene_functions
fp <- "G:\\My Drive\\FermentationExplorer\\dev\\test\\networks_simple.json"
networks_payload <- readLines(fp)
networks_result <- post_json("http://127.0.0.1:8000/compute/networks", networks_payload)
print(dplyr::bind_rows(networks_result$fluxes))
networks_payload
# Variable:  gene_functions
fp <- "G:\\My Drive\\FermentationExplorer\\dev\\test\\networks_simple.json"
# Variable:  gene_functions
fp <- "G:\\My Drive\\FermentationExplorer\\dev\\test\\networks_simple.json"
networks_payload <- readLines(fp)
# Variable:  gene_functions
fp <- "G:\\My Drive\\FermentationExplorer\\dev\\test\\networks_simple.json"
networks_payload <- readLines(fp)
networks_result <- post_json("http://127.0.0.1:8000/compute/networks", networks_payload)
print(dplyr::bind_rows(networks_result$fluxes))
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
# Variable:  gene_functions
fp <- "G:\\My Drive\\FermentationExplorer\\dev\\test\\networks_simple.json"
networks_payload <- readLines(fp)
networks_result <- post_json("http://127.0.0.1:8000/compute/networks", networks_payload)
print(dplyr::bind_rows(networks_result$fluxes))
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
# Variable:  gene_functions
fp <- "G:\\My Drive\\FermentationExplorer\\dev\\test\\ml_simple.json"
ml_payload <- readLines(fp)
ml_result <- post_json("http://127.0.0.1:8000/compute/ml", ml_payload)
print(dplyr::bind_rows(ml_result$probabilities))
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
runApp('G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Shiny/FermentationExplorer')
install.packages("here")
library(here)
here()
here("construct","a","path")
# === Define functions ===
#' Replace NULL with NA recursively
#'
#' This helper function recursively replaces all `NULL` values in a nested list
#' with `NA`. It is useful when processing JSON objects from APIs that use `null`
#' to indicate missing values.
#'
#' @param x A list or atomic object potentially containing `NULL` values.
#'
#' @return A modified version of `x` with all `NULL` values replaced by `NA`.
#'         If `x` is a list, the replacement is performed recursively.
#'
#' @examples
#' replace_null_with_na(list(a = NULL, b = list(c = NULL, d = 1)))
#'
#' @export
replace_null_with_na <- function(x) {
if (is.list(x)) lapply(x, replace_null_with_na)
else if (is.null(x)) NA
else x
}
#' Send a JSON POST request and parse the response
#'
#' This function sends a JSON-formatted POST request to a given URL and returns
#' the parsed response content. It automatically replaces `NULL` values in the
#' JSON payload with `NA` before encoding.
#'
#' @param url A character string specifying the target URL.
#' @param json_text A character string representing the JSON payload to send.
#'
#' @return A parsed list from the JSON response body.
#'
#' @examples
#' json <- '{"x": 1, "y": null}'
#' post_json("http://example.com/endpoint", json)
#'
#' @export
post_json <- function(url, json_text) {
input <- jsonlite::fromJSON(json_text, simplifyVector = FALSE)
input <- replace_null_with_na(input)
res <- httr::POST(
url = url,
body = jsonlite::toJSON(input, auto_unbox = TRUE),
encode = "json"
)
httr::content(res, as = "parsed", type = "application/json")
}
# === Status Check ===
cat("==== /status ====\n")
print(httr::content(httr::GET("http://127.0.0.1:8000/status"), as = "parsed"))
# === Options Endpoints ===
cat("\n==== /options/taxonomy ====\n")
print(httr::content(httr::GET("http://127.0.0.1:8000/options/taxonomy"), as = "parsed"))
cat("\n==== /options/networks ====\n")
print(httr::content(httr::GET("http://127.0.0.1:8000/options/networks"), as = "parsed"))
cat("\n==== /options/ml ====\n")
print(httr::content(httr::GET("http://127.0.0.1:8000/options/ml"), as = "parsed"))
# === Compute: /compute/taxonomy ===
cat("\n==== /compute/taxonomy ====\n")
taxonomy_payload <- '{
"query_taxa": {
"NCBI Domain": ["Bacteria", "Bacteria", "Bacteria", "Bacteria", "Bacteria"],
"NCBI Phylum": ["Bacillota", "Bacteroidota", "Spirochaetota", "Bacillota", "Actinomycetota"],
"NCBI Class": ["Clostridia", "Bacteroidia", "Spirochaetia", "Clostridia", "Actinomycetes"],
"NCBI Order": ["Eubacteriales", "Bacteroidales", "Spirochaetales", "Lachnospirales", "Mycobacteriales"],
"NCBI Family": ["Clostridiaceae", "Porphyromonadaceae", "Treponemataceae", "Lachnospiraceae", "Corynebacteriaceae"],
"NCBI Genus": ["Clostridium", "unclassified", "Treponema", "unclassified", "Corynebacterium"],
"NCBI Species": [
"Clostridium lundense",
"unclassified",
"Treponema ruminis",
"unclassified",
"Corynebacterium vitaeruminis"
]
},
"traits_to_predict": ["Type of metabolism"],
"ignore_NA": true,
"simple_names": true,
"ignore_species": true,
"system_taxonomy": "LPSN"
}'
taxonomy_result <- post_json("http://127.0.0.1:8000/compute/taxonomy", taxonomy_payload)
print(dplyr::bind_rows(taxonomy_result$probabilities))
# === Define functions ===
#' Replace NULL with NA recursively
#'
#' This helper function recursively replaces all `NULL` values in a nested list
#' with `NA`. It is useful when processing JSON objects from APIs that use `null`
#' to indicate missing values.
#'
#' @param x A list or atomic object potentially containing `NULL` values.
#'
#' @return A modified version of `x` with all `NULL` values replaced by `NA`.
#'         If `x` is a list, the replacement is performed recursively.
#'
#' @examples
#' replace_null_with_na(list(a = NULL, b = list(c = NULL, d = 1)))
#'
#' @export
replace_null_with_na <- function(x) {
if (is.list(x)) lapply(x, replace_null_with_na)
else if (is.null(x)) NA
else x
}
#' Send a JSON POST request and parse the response
#'
#' This function sends a JSON-formatted POST request to a given URL and returns
#' the parsed response content. It automatically replaces `NULL` values in the
#' JSON payload with `NA` before encoding.
#'
#' @param url A character string specifying the target URL.
#' @param json_text A character string representing the JSON payload to send.
#'
#' @return A parsed list from the JSON response body.
#'
#' @examples
#' json <- '{"x": 1, "y": null}'
#' post_json("http://example.com/endpoint", json)
#'
#' @export
post_json <- function(url, json_text) {
input <- jsonlite::fromJSON(json_text, simplifyVector = FALSE)
input <- replace_null_with_na(input)
res <- httr::POST(
url = url,
body = jsonlite::toJSON(input, auto_unbox = TRUE),
encode = "json"
)
httr::content(res, as = "parsed", type = "application/json")
}
# === Status Check ===
cat("==== /status ====\n")
print(httr::content(httr::GET("http://127.0.0.1:8000/status"), as = "parsed"))
# === Options Endpoints ===
cat("\n==== /options/taxonomy ====\n")
print(httr::content(httr::GET("http://127.0.0.1:8000/options/taxonomy"), as = "parsed"))
cat("\n==== /options/networks ====\n")
print(httr::content(httr::GET("http://127.0.0.1:8000/options/networks"), as = "parsed"))
cat("\n==== /options/ml ====\n")
print(httr::content(httr::GET("http://127.0.0.1:8000/options/ml"), as = "parsed"))
# === Compute: /compute/taxonomy ===
cat("\n==== /compute/taxonomy ====\n")
taxonomy_payload <- '{
"query_taxa": {
"NCBI Domain": ["Bacteria", "Bacteria", "Bacteria", "Bacteria", "Bacteria"],
"NCBI Phylum": ["Bacillota", "Bacteroidota", "Spirochaetota", "Bacillota", "Actinomycetota"],
"NCBI Class": ["Clostridia", "Bacteroidia", "Spirochaetia", "Clostridia", "Actinomycetes"],
"NCBI Order": ["Eubacteriales", "Bacteroidales", "Spirochaetales", "Lachnospirales", "Mycobacteriales"],
"NCBI Family": ["Clostridiaceae", "Porphyromonadaceae", "Treponemataceae", "Lachnospiraceae", "Corynebacteriaceae"],
"NCBI Genus": ["Clostridium", "unclassified", "Treponema", "unclassified", "Corynebacterium"],
"NCBI Species": [
"Clostridium lundense",
"unclassified",
"Treponema ruminis",
"unclassified",
"Corynebacterium vitaeruminis"
]
},
"traits_to_predict": ["Type of metabolism"],
"ignore_NA": true,
"simple_names": true,
"ignore_species": true,
"system_taxonomy": "LPSN"
}'
taxonomy_result <- post_json("http://127.0.0.1:8000/compute/taxonomy", taxonomy_payload)
print(dplyr::bind_rows(taxonomy_result$probabilities))
plumber::plumb(file='G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Plumber/server.R')$run()
plumber::plumb(file='G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Plumber/server.R')$run()
plumber::plumb(file='G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Plumber/server.R')$run()
plumber::plumb(file='G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Plumber/server.R')$run()
plumber::plumb(file='G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Plumber/server.R')$run()
plumber::plumb(file='G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Plumber/server.R')$run()
plumber::plumb(file='G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Plumber/server.R')$run()
plumber::plumb(file='G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Plumber/server.R')$run()
plumber::plumb(file='G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Plumber/server.R')$run()
plumber::plumb(file='G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Plumber/server.R')$run()
plumber::plumb(file='G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Plumber/server.R')$run()
plumber::plumb(file='G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Plumber/server.R')$run()
plumber::plumb(file='G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Plumber/server.R')$run()
plumber::plumb(file='G:/My Drive/FermentationExplorer/dev/FermentationExplorer-dev/Plumber/server.R')$run()
print(httr::content(
httr::GET(
url = "http://127.0.0.1:8000/parameters/networks",
query = list(selected_reaction = "Fermentation (glucose)")
),
as = "parsed"
))
print(httr::content(httr::GET("http://127.0.0.1:8000/status"), as = "parsed"))
print(httr::content(httr::GET("http://127.0.0.1:8000/status"), as = "parsed"))
# === Example Requests ===
cat("==== /status ====\n")
print(httr::content(httr::GET("http://127.0.0.1:8000/examples"), as = "parsed"))
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
load("G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Database/assembleDatabase--28 May 25.RData")
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
shiny::runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
runApp('G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Shiny/MicrobeDecoder')
plumber::plumb(file='G:/My Drive/MicrobeDecoder/dev/MicrobeDecoder-dev/Plumber/server.R')$run()
shiny::runApp()
runApp()
